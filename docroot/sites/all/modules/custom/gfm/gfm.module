<?php
/**
 * @file
 * Provides enhancements to the Markdown syntax as defined at:
 * http://github.github.com/github-flavored-markdown/
 */

/**
 * Implements hook_filter_info().
 */
function gfm_filter_info() {
  $filters['filter_gfm'] = array(
    'title' => t('Github Flavored Markdown'),
    'description' => t('Provides several user-friendly tweaks to the Markdown syntax.'),
    'process callback' => '_filter_gfm',
    'settings callback' => '_filter_gfm_settings',
  );
  return $filters;
}

/**
 *  Filter process callback
 */
function _filter_gfm($text, $format) {
  if (!empty($text) && isset($format->settings)) {
    // Implement fenced code blocks.
    if ($format->settings['gfm']['gfm_fenced_code']) {
      $text = preg_replace_callback('/(`{3})[ ]*\n([^\n].*)\n\1/s', '_gfm_fenced_code_callback', $text);
    }

    // Prevent foo_bar_baz from ending up with an italic word in the middle.
    if ($format->settings['gfm']['gfm_escape_underscores']) {
      $text = preg_replace_callback('/((?! {4}|\t)\w+_\w+_\w[\w_]*)/', '_gfm_escape_underscores_callback', $text);
    }

    // Autolink urls.
    if ($format->settings['gfm']['gfm_autolink']) {
      $text = _gfm_normalize_link_definitions($text);
      $text = _gfm_autolink($text);
    }

    // Let single newlines become <br /> tags.
    if ($format->settings['gfm']['gfm_hardwrap_newlines']) {
      $text = preg_replace_callback('/[\w\<][^\n]*\n+/', '_gfm_hardwrap_newlines_callback', $text);
    }
  }
  return $text;
}

/**
 *  Hardwrap newlines callback
 */
function _gfm_hardwrap_newlines_callback($matches) {
  if (preg_match('/\n\n/', $matches[0])) {
    return $matches[0];
  }
  else {
    return trim($matches[0]) . "  \n";
  }
}

/**
 *  Escape underscores callback
 */
function _gfm_escape_underscores_callback($matches) {
  return str_replace('_', '\_', $matches[0]);
}

/**
 *  Fenced code block callback
 */
function _gfm_fenced_code_callback($matches) {
  $lines = explode("\n", $matches[2]);
  $text = '';
  foreach ($lines as $line) {
    $text .= str_repeat(' ', 4) . $line . "\n";
  }
  return $text;
}

/**
 *  Helper function for autolinking
 */
function _gfm_autolink($text) {
  return preg_replace_callback('{
    # http://rubular.com/r/GRYtdjYzZK
    (?<!]:\s)               # attempt to ignore link definitions of reference-style links
    (?<=\A|[\s])            # positive lookbehind for BOF or tab, newline, or space
      ((f|ht)tps?://){0,1}  # optional scheme name, only ftp/http/https
      ([-\w]+\.)+           # server name(s) and domain
      [a-zA-Z0-9]{2,4}      # TLD
      (:\d{1,5})?           # optional port
      ([/?#][^\s]*)?        # optional path, query or fragment
    (?=\Z|[\s,.])           # positive lookahead for EOF or tab, newline, space, comma, or period
    }x',
    '_gfm_autolink_callback', $text);
}

/**
 *  Autolink callback
 */
function _gfm_autolink_callback($matches) {
  $url = $matches[0];
  $full_url = (preg_match('{^(f|ht)tps?://}x', $url)) ? $url : 'http://' . $url;
  return '[' . $url . '](' . $full_url . ')';
}

/**
 *  Helper function for normalizing whitespace in link definintions
 */
function _gfm_normalize_link_definitions($text) {
  // Thanks to Michel Fortin/Markdown PHP for the following regex.
  return preg_replace_callback('{
    ^[ ]{0,3}\[(.+)\][ ]?:  # id = $1
        [ ]*
        \n?       # maybe *one* newline
        [ ]*
      (?:
        <(.+?)>     # url = $2
      |
        (\S+?)      # url = $3
      )
        [ ]*
        \n?       # maybe one newline
        [ ]*
      (?:
        (?<=\s)     # lookbehind for whitespace
        ["(]
        (.*?)     # title = $4
        [")]
        [ ]*
      )?  # title is optional
      (?:\n+|\Z)
    }xm',
    '_gfm_normalize_link_definitions_callback', $text);
}

/**
 *  Link definition normalization callback
 */
function _gfm_normalize_link_definitions_callback($matches) {
  $url = (!empty($matches[2])) ? $matches[2] : $matches[3];
  $title = (!empty($matches[4])) ? ' "' . $matches[4] . '"' : '';
  return '[' . $matches[1] . ']: ' . $url . $title . "\n";
}

/**
 *  Filter settings callback
 */
function _filter_gfm_settings(&$form, &$form_state, $filter, $format, $defalts) {
  return array(
    'gfm' => array(
      '#type' => 'fieldset',
      '#title' => 'Github Flavored Markdown',

      'gfm_autolink' => array(
        '#type' => 'checkbox',
        '#title' => t('Enable Autolinking'),
        '#default_value' => isset($filter->settings['gfm']) ? $filter->settings['gfm']['gfm_autolink'] : 0,
      ),
      'gfm_fenced_code' => array(
        '#type' => 'checkbox',
        '#title' => t('Enable Fenced Code'),
        '#default_value' => isset($filter->settings['gfm']) ? $filter->settings['gfm']['gfm_fenced_code'] : 0,
      ),
      'gfm_escape_underscores' => array(
        '#type' => 'checkbox',
        '#title' => t('Escape Underscores in Words'),
        '#default_value' => isset($filter->settings['gfm']) ? $filter->settings['gfm']['gfm_escape_underscores'] : 0,
      ),
      'gfm_hardwrap_newlines' => array(
        '#type' => 'checkbox',
        '#title' => t('Hard Wrap Single Newlines'),
        '#default_value' => isset($filter->settings['gfm']) ? $filter->settings['gfm']['gfm_hardwrap_newlines'] : 0,
      ),
    ),
  );
}


